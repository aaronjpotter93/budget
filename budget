#!/bin/python3

# incomes
wgu_supplement = 397

# defining take home variables
after_tax_rate = 0.92
aaron_scheduled_shifts_this_month = 4
aaron_hourly = 15
aaron_hours = 8
aaron_month = aaron_hours * aaron_hourly * aaron_scheduled_shifts_this_month * after_tax_rate

# aaron
aaron_income = aaron_month
#aaron_income = 1001
#aaron_income = 2201
aaron_income = 3067 #IT Job

# aaron logged hours implementation for outlier.ai

megan_scheduled_shifts_this_month = 0
megan_hourly = 17
megan_hours = 6
megan_month = megan_hours * megan_hourly * megan_scheduled_shifts_this_month * after_tax_rate

# megan
megan_salary = 2130
megan_monthly = megan_month
megan_income = megan_salary + megan_monthly

# total income
total_income = megan_income + aaron_income + wgu_supplement
salary = total_income * 12

# income tier set to 0 before program logic determines correct tier
income_tier = 0

# defines number of weeks this month for adjusting eating out and grocery expense
number_of_mondays_this_month = 5
number_of_fridays_this_month = 4

#used for calculating savings at the end
years_savings = .75


# defining rent rate
#1710 - 1542 = $168 fluff charges
#base_rent = 1542 #before September 28th
base_rent = 1597 #after September 28th
fluff_rent = 168

"""
Fluff charges consist of:
Car Port $35
Liability Only $15
Water ~ $6.44
Trash ~ $16.66
Sewer ~ $16.53
Pest Control Fee ~ $5.00
Common Area Gas ~ $0.15
Common Area Electric ~ $6.38
Service Fee ~ $7.30
"""









#######################################################################################









#improve dialogue for years
years = "years"
if years_savings <= 1:
    years = "year"

# defining strict fixed expenses
rent = base_rent + fluff_rent
car_payment = 275.84
car_insurance = 98.32  # Hyundai $54.33 Liability ONLY, Honda CRV $43.99 Full Coverage
renters_insurance = 15.5  # bill $93 every 6 months
internet = 30
car_maintenance = 150
utilities = 70

# classifying tiers for dynamic budgeting

# Tier 1: For the 9 months I'm still in school 
class Tier_1:
    def __init__(self):
        self.tier = 1

        # strict variable
        self.groceries = 68 * number_of_mondays_this_month
        self.gas = 180
        self.restaurants = 25 * number_of_fridays_this_month

        # discretionary spendings
        self.icloud = 0
        self.dates = 0
        self.gifts = 0
        self.donations = 0
        self.personal = 60
        self.gaming = 0
        self.clothes_shoes_accessories = 0
        self.entertainment = 0
        self.social = 0
        self.recreation = 0
        self.personal_care = 0
        self.classroom = 0
        self.furnishing = 0
        self.other = 0
        self.travel = 0

        # discretionary savings
        self.home_down = 0
        self.roth_ira = 0
        self.megan_savings = 200
        self.high_yield = 100

# second tier
class Tier_2:
    def __init__(self):
        self.tier = 2

        # strict variable
        self.groceries = 80 * number_of_mondays_this_month
        self.gas = 200
        self.restaurants = 25 * number_of_fridays_this_month

        # discretionary spendings
        self.icloud = 0
        self.dates = 30
        self.gifts = 0
        self.donations = 0
        self.personal = 60
        self.gaming = 0
        self.clothes_shoes_accessories = 0
        self.entertainment = 30
        self.social = 0
        self.recreation = 0
        self.personal_care = 0
        self.classroom = 0
        self.furnishing = 0
        self.other = 0
        self.travel = 15

        # discretionary savings
        self.home_down = 0
        self.roth_ira = 0
        self.megan_savings = 200
        self.high_yield = 100

# third tier
class Tier_3:
    def __init__(self):
        self.tier = 3
        # strict variable
        self.groceries = 80 * number_of_mondays_this_month
        self.gas = 200
        self.restaurants = 25 * number_of_fridays_this_month

        # discretionary spendings
        self.icloud = 0
        self.dates = 50
        self.gifts = 30
        self.donations = 0
        self.personal = 60
        self.gaming = 15
        self.clothes_shoes_accessories = 50
        self.entertainment = 45
        self.social = 100
        self.recreation = 40
        self.personal_care = 0
        self.classroom = 0
        self.furnishing = 0
        self.other = 0
        self.travel = 15

        # discretionary savings
        self.home_down = 100
        self.roth_ira = aaron_income * 0.10
        self.megan_savings = 250
        self.high_yield = 250

if aaron_income <= 1000:  # take home salary < $12,000 (part time jobs)
    income_tier = Tier_1()
elif aaron_income > 1000 and aaron_income <= 2200:  # take home salary > $12,000 < $26,496 (not quite full time)
    income_tier = Tier_2()
elif aaron_income > 2200 and aaron_income <= 4333:  # take home salary > $24,496 < $52,000 (at least full time at $15/hr)
    income_tier = Tier_3()
elif aaron_income > 4333 and aaron_income <= 6000:  # take home salary > $52,000 < $72,000 (big boy job)
    income_tier = Tier_3()
elif aaron_income > 6000 and aaron_income <= 8333:  # take home salary > $72,000 < $100,000
    income_tier = Tier_3()

# Define hardware terms
class Hardware:
    def __init__(self, lifespan, price, item_tier, income_tier, fr):
        # defining properties of hardware
        self.lifespan = lifespan
        self.item_tier = item_tier
        self.price = price
        self.fr = fr

        # calculate lifespan and rate
        if self.item_tier <= income_tier.tier:
            self.rate = (self.price / self.lifespan) / 12
            if fr == 2:
                self.rate = self.rate * 2
        else:
            self.rate = 0
            self.rate_for_two = 0

# defining hardware tech items of interest and their tiers to budget for
earbuds = Hardware(5, 250, 3, income_tier, 1)
headphones = Hardware(5, 350, 3, income_tier, 2)
watch = Hardware(5, 300, 3, income_tier, 2)
phone = Hardware(6, 900, 3, income_tier, 2)
tablet = Hardware(6, 728, 4, income_tier, 1)
laptop = Hardware(8, 1699, 3, income_tier, 2)
desktopPC = Hardware(8, 1200, 3, income_tier, 1)
car = Hardware(30, 30000, 3, income_tier, 1)

hardware_list = [earbuds, headphones, watch, phone, tablet, laptop, desktopPC, car]
hardware_names = ["earbuds", "headphones", "watch", "phone", "tablet", "laptop", "desktopPC", "car"]

if isinstance(income_tier, Tier_1) or isinstance(income_tier, Tier_2) or isinstance(income_tier, Tier_3):
    # strict variable
    groceries = income_tier.groceries
    gas = income_tier.gas
    restaurants = income_tier.restaurants

    # discretionary spendings assignments
    icloud = income_tier.icloud
    dates = income_tier.dates
    gifts = income_tier.gifts
    donations = income_tier.donations
    personal = income_tier.personal
    gaming = income_tier.gaming
    clothes_shoes_accessories = income_tier.clothes_shoes_accessories
    entertainment = income_tier.entertainment
    social = income_tier.social
    recreation = income_tier.recreation
    personal_care = income_tier.personal_care
    classroom = income_tier.classroom
    furnishing = income_tier.furnishing
    other = income_tier.other
    travel = income_tier.travel

    # discretionary savings for long term goals assignments
    home_down = income_tier.home_down
    roth_ira = income_tier.roth_ira
    megan_savings = income_tier.megan_savings
    high_yield = income_tier.high_yield

# discretionary savings for hardware
hardware_savings = (
        headphones.rate
        + watch.rate
        + phone.rate
        + tablet.rate
        + earbuds.rate
        + laptop.rate
        + desktopPC.rate 
        + car.rate
)

# category totals
strict_fixed = car_payment + rent + car_insurance + internet + car_maintenance + utilities + renters_insurance
soft_fixed = groceries + gas + restaurants
discretionary_spendings = dates + gifts + personal + social + recreation + personal_care + clothes_shoes_accessories + donations + classroom + furnishing + other + icloud + travel
discretionary_savings = hardware_savings + roth_ira + home_down + megan_savings + high_yield

#total budget
total_budget = strict_fixed + soft_fixed + discretionary_spendings + discretionary_savings
pre_discretionary_remaining = total_income - (strict_fixed + soft_fixed)
surplus_deficit = total_income - total_budget

# category totals as percentages
psurplus_deficit = (surplus_deficit / total_income ) * 100
pstrict_fixed = ( strict_fixed / total_income ) * 100
psoft_fixed = ( soft_fixed / total_income ) * 100
pdiscretionary_spendings = ( discretionary_spendings / total_income ) * 100
pdiscretionary_savings = ( discretionary_savings / total_income ) * 100

# more as percentages
prent = (rent / total_income) * 100
pre = (pre_discretionary_remaining / total_income) * 100

#year total budget
year_expenses = total_budget * 12
surplus_deficit_year = salary - year_expenses

#Income to Fixed Expenses Ratio
aaron_income_strict_ratio = aaron_income /  strict_fixed

print(aaron_income_strict_ratio)

#print out all the calculations
print("Sources of Income: Month Overview")
print("\n")
print(f"WGU Supplement: ${wgu_supplement:,.2f}")
print(f"Megan's Take Home Pay: ${megan_income:,.2f}")
print(f"Aaron's Take Home Pay: ${aaron_income:,.2f}")
print(f"Total Income: ${total_income:,.2f}")
print("---------------------------------------")

#overview
print("Income Tier: ", income_tier.tier)
print("\n")
print(f"Monthly Spendings: ${total_budget:,.2f}")
print(f"Pre Discretionary Dispersment Remaining: ${pre_discretionary_remaining:,.2f}")
print(f"\t{pre:.0f} % of Total Income")
if surplus_deficit > 0:
    print(f"Remaining Balance: ${surplus_deficit:,.2f}")
else:
    print(f"Over Budget: ${surplus_deficit:,.2f}")
print(f"\t{psurplus_deficit:.0f} % of Total Income")
print("---------------------------------------")    
print("\n")

#strict fixed
print(f"Strict Fixed aka Bills: ${strict_fixed:,.2f}")
print(f"{pstrict_fixed:.0f} % of Total Income")
print("---------------------------------------")
print(f"Rent: ${rent:,.2f} ({prent:.0f} % of Total Income)")
print("Car: $", round(car_payment, 2))
print("Car Insurance: $", round(car_insurance, 2))
print("Renters Insurance: $", round(renters_insurance, 2))
print("Internet: $", round(internet, 2))
print("Utilities: $", round(utilities, 2))
print("\n")

#strict variable
print(f"Strict Variable Spendings: ${soft_fixed:,.2f}")
print(f"{psoft_fixed:.0f} % of Total Income")
print("---------------------------------------")
print("Groceries: $", round(groceries, 2))
print("Groceries Per Week: $", round((groceries / number_of_mondays_this_month), 2))
print("Gas: $", round(gas, 2))
print("Restaurants: $", round(restaurants, 2))
print("Restaurants Per Week: $", round((restaurants / number_of_fridays_this_month), 2))
print("\n")

#conditionally print discretionary spendings
print(f"Discretionary Spendings: ${discretionary_spendings}")
print(f"{pdiscretionary_spendings:.0f} % of Total Income")
print("---------------------------------------")

if income_tier.tier > 1:
    print("Dates: $", round(dates, 2))
    print("Gifts: $", round(gifts, 2))
    print("Donations: $", round(donations, 2))
    print("Personal: $", round(personal, 2))
    print("Gaming: $", round(gaming, 2))
    print("Clothes, Shoes, and Accessories: $", round(clothes_shoes_accessories, 2))
    print("Entertainment: $", round(entertainment, 2))
    print("Social: $", round(social, 2))
    print("Recreation: $", round(recreation))
    print("Personal Care: $", round(personal_care, 2))
    print("iCloud: $", round(icloud, 2))    
    print("Travel: $", round(travel, 2))
    print("Classroom: $", round(classroom, 2))
    print("Furnishing: $", round(furnishing, 2))
    print("Other: $", round(other, 2))
    print("\n")
    
else:
    print("You are broke :P")
    print("Personal: $", round(personal, 2))
    print("\n")

#conditionally print discretionary savings
print(f"Discretionary Savings: ${discretionary_savings:,.2f}")
print(f"{pdiscretionary_savings:.0f} % of Total Income")
print("---------------------------------------")
if income_tier.tier > 1:
    print("Home Down Payment: $", round(home_down, 2))
    print("Roth IRA Contributions: $", round(roth_ira, 2))
    print(f"Megan's Savings: ${megan_savings:,.2f}")
    print(f"High-Yield Savings: ${high_yield:,.2f}")
    print("Hardware Savings: $", round(hardware_savings, 2))
    print("\n")
else:
    print("You are broke :P")
    print(f"Megan's Savings: ${megan_savings:,.2f}")
    print(f"High-Yield Savings: ${high_yield:,.2f}")
    print("\n")

#function calculating categories over time
def calculate_years(years_savings, category):
    value = 0
    for _ in range(int(years_savings * 12)):
        value += category
    return value

#calculatin savings
additional_savings = calculate_years(years_savings, surplus_deficit)
home_down_savings = calculate_years(years_savings, home_down)
megan_savings_savings = calculate_years(years_savings, megan_savings)
high_yield_savings = calculate_years(years_savings, high_yield)
hardware_savings_savings = calculate_years(years_savings, hardware_savings)
clothes_shoes_accessories_savings = calculate_years(years_savings, clothes_shoes_accessories)
gaming_savings = calculate_years(years_savings, gaming)

#total savings
total_savings = additional_savings + home_down_savings + hardware_savings_savings + clothes_shoes_accessories_savings + gaming_savings

#yearly overview
print("Yearly Overview:")
print(f"Combined Incomes total Salary: ${salary:,.2f}")
print(f"A Year of Expenses: ${year_expenses:,.2f}")
if surplus_deficit_year > 0:
    print(f"A Year in Surplus: ${surplus_deficit_year:,.2f}")
else:
    print(f"A Year in Deficit: ${surplus_deficit_year:,.2f}")
print("---------------------------------------")
print("\n")

#conditionally print savings
if income_tier.tier > 1:
    print(f"Additional Savings saved up after {years_savings} {years}: ${additional_savings:,.2f}")
    print("---------------------------------------")
    print(f"Home Down Payment saved up after {years_savings} {years}: ${home_down_savings:,.2f}")
    print(f"Clothing, Shoes, Accessories saved up after {years_savings} {years}: {clothes_shoes_accessories_savings:,.2f}")
    print(f"Megan's Savings saved up after {years_savings} {years}: ${megan_savings_savings:,.2f}")
    print(f"High-Yield Savings saved up after {years_savings} {years}: ${high_yield_savings:,.2f}")
    if income_tier.tier > 2:
        print(f"Gaming Savings saved up after {years_savings} {years}: ${gaming_savings:,.2f}")
        print(f"Hardware Savings saved up after {years_savings} {years}: ${hardware_savings_savings:,.2f}")
        for counter, item in enumerate(hardware_list):            
            name = hardware_names[counter]
            item_savings = item.rate * 12 * years_savings
            if item.fr == 1:
        	    formatting = "person"
            else:
        	    formatting = "people"
        print(f"Savings for {name} saved up after {years_savings} {years}: ${item_savings:,.2f} for {item.fr} {formatting}")

    print("---------------------------------------")            
    print(f"Total Combined Savings Accounts saved up after {years_savings} {years}: ${total_savings:,.2f}")
else:
    print(f"Total Savings saved up after {years_savings} {years}: ${additional_savings:,.2f}")

print("\n")
print("Discretionary Priorities: \n1. Pay off Car\n2. Replenish Megan's Savings to $10k\n3. High Yield Emergancy Savings to $10k")







